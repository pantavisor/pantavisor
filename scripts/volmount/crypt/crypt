#!/bin/sh

#
# Copyright (c) 2021 Pantacor Ltd.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
set -e

op=$1
dm_type=$2
path=$3
mntpath=$4

CAAM_KEYGEN=caam-keygen

MKFS_OPTS_EXT4=${MKFS_OPTS_EXT4:-"-b 1024"}
MNT_OPTS_EXT4=${MNT_OPTS_EXT4:-"-o noatime"}

# ensure that devicemapper builds with udev support
# don't believe that udev will create the /dev/mapper/* nodes
DM_DISABLE_UDEV=1
export DM_DISABLE_UDEV

PATH=$LIBPVPATH:$LIBPVPATH/volmount/crypt:$PATH
export PATH

export LD_LIBRARY_PATH="/x86_64-linux-gnu:$LD_LIBRARY_PATH"

# do the same as losetup -f but also return the path of loop device on stdout
# if successful.
atomic_losetup()
{
	_imgfile=$1
	if ! losetup -f $dir/$img_file; then
		echo "ERROR: unable to setup loop device for $_imgfile"
		return 122
	fi
	if ! _l=`losetup -a | grep ${imgfile}$ | tail -n 1`; then
		echo "ERROR: unable to setup loop device for $_imgfile"
		return 122
	fi
	echo $_l | sed -e 's/: [0-9][0-9]* .*//'
}

do_crypt_init()
{

	base=`basename $1`
	dir=`dirname $1`

	mkdir -p $dir

	keyname=`echo $base | awk '{split($0,a,","); print a[3]}'`
	if [ $dm_type == "caam" ]; then
		$CAAM_KEYGEN create $keyname ecb -s 16
		cp /data/caam/$keyname* $dir
		cat /data/caam/$keyname | keyctl padd logon logkey: @u
		[ $? -ne 0 ] && echo "ERROR: CAAM: Unable to load key" && exit 1
	elif [ $dm_type == "dcp" ]; then
		dd if=/dev/random bs=32 count=1 | x--pv-dcp-tool \
			encrypt $dir/$keyname.new
		sync
		mv $dir/$keyname.new $dir/$keyname
		[ $? -ne 0 ] && echo "ERROR: DCP: Unable to create grey blob" && exit 1
	elif [ $dm_type == "versatile" ]; then
		if test -c /dev/hwrng && dd if=/dev/hwrng of=$dir/$keyname.txt bs=32 count=1; then
			echo "Successfully seeded from hwrng"
		else
			echo "WARNING: /dev/hwrng not available; using urandom for versatile crypt key"
			dd if=/dev/urandom of=$dir/$keyname.txt bs=32 count=1
		fi
	else
		echo "Unknown device mapper target"
		exit 1
	fi

	# sync after keyname files got created
	sync

	img_file=`echo $base | awk '{split($0,a,","); print a[1]}'`
	img_size=`echo $base | awk '{split($0,a,","); print a[2]}'`
	dd if=/dev/zero of=$dir/$img_file bs=1M count=$img_size

	if [ $dm_type == "caam" ]; then
		if ! CAAM_LOOP=`atomic_losetup $dir/$img_file`; then
			echo "ERROR: Unable to loop setup"
			exit 1
		fi
	fi

	device_name=`echo $img_file | awk '{split($0,a,"."); print a[1]}'`
	if [ $dm_type == "caam" ]; then
		dmsetup -v create $device_name --table "0 $(blockdev --getsz $CAAM_LOOP) crypt capi:tk(cbc(aes))-plain :36:logon:logkey: 0 $CAAM_LOOP 0 1 sector_size:512"
	elif [ $dm_type == "dcp" ]; then
		keyfile=`mktemp`
		x--pv-dcp-tool decrypt $dir/$keyname > $keyfile
		cryptsetup open -s 256 -c "capi:cbc(aes)-essiv:sha256" --type plain --key-file=$keyfile $dir/$img_file $device_name
		rm -f $keyfile
	elif [ $dm_type == "versatile" ]; then
		cryptsetup open -s 256 -c "aes-cbc-essiv:sha256" --type plain --key-file=$dir/$keyname.txt $dir/$img_file $device_name
	else
		echo "Unknown device mapper target"
		exit 1
	fi
	[ $? -ne 0 ] && echo "ERROR: $dm_type: Unable to create/open crypt device" && exit 1

	mkfs.ext4 $MKFS_OPTS_EXT4 /dev/mapper/$device_name
	[ $? -ne 0 ] && echo "ERROR: Unable to format to ext4" && exit 1

	sync
	if [ $dm_type == "caam" ]; then
		dmsetup remove $device_name
		keyctl clear @u
		keyctl purge @u
		rm -rf /data
		losetup -d $CAAM_LOOP
	elif [ $dm_type == "dcp" ]; then
		cryptsetup close $device_name
	elif [ $dm_type == "versatile" ]; then
		cryptsetup close $device_name
	else
		echo "Unknown device mapper target"
		exit 1
	fi

	sync
	touch $dir/$keyname.init_done
}

do_dm_sanity()
{
	if [ $dm_type == "caam" ]; then
		which $CAAM_KEYGEN &> /dev/null || exit 111
		which dmsetup &> /dev/null || exit 111
		which keyctl &> /dev/null || exit 111
	elif [ $dm_type == "dcp" ]; then
		which cryptsetup &> /dev/null || exit 111
	elif [ $dm_type == "versatile" ]; then
		which cryptsetup &> /dev/null || exit 111
	else
		echo "Unknown device mapper target"
		exit 111
	fi

	which losetup &> /dev/null || exit 111
	which dd &> /dev/null || exit 111
	which mkfs.ext4 &> /dev/null || exit 111
}

clean_disk()
{
	local type="$1"
	local name="$2"

	if [ "$type" = "caam" ]; then
		if dmsetup info -c "$name" >/dev/null 2>&1; then
			echo "WARN: dm $name still exists"
			dmsetup remove "$name" > /dev/null 2>&1 || true
		fi
	elif [ "$type" = "dcp" ] || [ "$type" = "versatile" ]; then
		if cryptsetup status "$name" > /dev/null 2>&1; then
			echo "WARN: cryptdisk $1 still exists"
			cryptsetup close "$name" > /dev/null 2>&1 || true
		fi
	fi
}

do_mount_disk()
{
	do_dm_sanity

	dm_type=$1
	path=$2
	mntpath=$3
	specialrun=$4

	base=`basename $2`
	dir=`dirname $2`

	keyname=`echo $base | awk '{split($0,a,","); print a[3]}'`
	[ ! -f $dir/$keyname.init_done ] && [ ! -f $dir/$keyname ] && do_crypt_init $2

	cd $dir
	if [ $dm_type == "caam" ]; then
		mkdir -p /data/caam
		cp $keyname* /data/caam
		$CAAM_KEYGEN import $keyname.bb $keyname.import
		[ $? -ne 0 ] && echo "ERROR: CAAM: Unable to import black blob" && exit 2

		cat /data/caam/$keyname.import | keyctl padd logon logkey: @u
		[ $? -ne 0 ] && echo "ERROR: CAAM: Unable to load key" && exit 2
	fi

	img_file=`echo $base | awk '{split($0,a,","); print a[1]}'`
	cp -f $dir/$img_file $dir/$img_file.prebak
	if ! CAAM_LOOP=`atomic_losetup $dir/$img_file`; then
		echo "ERROR: could not loosetup"
		return 1;
	fi

	device_name=`echo $img_file | awk '{split($0,a,"."); print a[1]}'`
	clean_disk "$dm_type" "$device_name"
	if [ $dm_type == "caam" ]; then
		dmsetup create $device_name --table "0 $(blockdev --getsz $CAAM_LOOP) crypt capi:tk(cbc(aes))-plain :36:logon:logkey: 0 $CAAM_LOOP 0 1 sector_size:512"
	elif [ $dm_type == "dcp" ]; then
		keyfile=`mktemp`
		x--pv-dcp-tool decrypt $dir/$keyname > $keyfile
		cryptsetup open -s 256 -c "capi:cbc(aes)-essiv:sha256" --type plain --key-file=$keyfile $dir/$img_file $device_name
		rm -f $keyfile
	elif [ $dm_type == "versatile" ]; then
		cryptsetup open -s 256 -c "aes-cbc-essiv:sha256" --type plain --key-file=$dir/$keyname.txt $dir/$img_file $device_name
	else
		echo "Unknown device mapper target"
		exit 2
	fi
	if [ $? -ne 0 ]; then
		echo "ERROR: $dm_type: Unable to create/open crypt device"
		exit 3
	fi

	for i in 1 2 3; do
		if [ -b /dev/mapper/$device_name ]; then
			break
		fi
		sleep 1
	done
	if [ ! -b /dev/mapper/$device_name ]; then
		echo "ERROR: could not find the matching crypt mapper device /dev/mapper/$device_name"
		return 2
	fi

	mkdir -p $3
	if mount $MNT_OPTS_EXT4 /dev/mapper/$device_name $3; then
		# only backup if a clean run success
		[ -z "$specialrun" ] && [ ! -f $dir/$img_file.goodbak ] && cp -f $dir/$img_file.prebak $dir/$img_file.goodbak
		sync
		return 0
	fi

	echo "ERROR: could not setup dm-crypt volume"
	if [ "$specialrun" == "fsck" ] && [ -f $dir/$img_file.goodbak ]; then
		echo "Specialrun $specialrun did not succeed ... trying from goodbackup"
		cp -f $dir/$img_file.goodbak $dir/$img_file
		cryptsetup close $device_name || true
		if ! do_mount_disk "$dm_type" "$path" "$mntpath" bak; then
			return $?;
		fi
		echo "do_mount_disk from backup suceeded..."
		return 0
	elif [ "$specialrun" == "fsck" ]; then
		# later here we could remove .init_done file to trigger full reinit on next powercycle
		echo "do_mount_disk failed, no backup available, giving up!"
		return 5
	elif [ "$specialrun" == "bak" ]; then
		# later here we could remove .init_done file to trigger full reinit on next powercycle
		echo "do_mount_disk specialrun 'bak' failed. giving up ..."
		return 6
	fi

	echo "Trying fsck ...."
	fsck.ext4 -y /dev/mapper/$device_name || true
	cryptsetup close $device_name || true
	sync
	if ! do_mount_disk "$dm_type" "$path" "$mntpath" fsck; then
		return $?
	fi
	return 0
}

do_umount_disk()
{
	base=`basename $2`
	img_file=`echo $base | awk '{split($0,a,","); print a[1]}'`

	device_name=`echo $img_file | awk '{split($0,a,"."); print a[1]}'`
	umount $3
	rm -r $3
	if [ $dm_type == "caam" ]; then
		dmsetup remove $device_name
		keyctl clear @u
		keyctl purge @u
		rm -rf /data
	elif [ $dm_type == "dcp" ]; then
		cryptsetup close $device_name
	elif [ $dm_type == "versatile" ]; then
		cryptsetup close $device_name
	else
		echo "Unknown device mapper target"
		exit 4
	fi
	loop_dev=`losetup -a | grep $img_file | awk '{split($0,a,":"); print a[1]}'`
	losetup -d $loop_dev
}

case $op in
	mount)
		do_mount_disk $dm_type $path $mntpath
		;;
	umount)
		do_umount_disk $dm_type $path $mntpath
		;;
	*)
		echo "WRONG command line"
		exit 5
		;;
esac
