#!/bin/sh

#
# Copyright (c) 2021 Pantacor Ltd.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

op=$1
volumesrc=$2
container=$3
volume=$4

# ensure that devicemapper builds with dev support
# don't believe that udev will create the /dev/mapper/* nodes
DM_DISABLE_UDEV=1
export DM_DISABLE_UDEV

clean_dm() {
	local name="$1"
	if dmsetup info -c "$name" >/dev/null 2>&1; then
		echo "WARN: dm $name still exists"
		dmsetup remove "$name" > /dev/null 2>&1 || true
	fi
}

do_mount_squash() {
	traildir=`dirname $1`
	squashname=`basename $1`
	container=$2
	dmmanifest=$traildir/_dm/$squashname.json
	dmname=pv--dmverity--$container-${squashname%.*}
	volpath=/volumes/$container/$squashname

	if ! [ -f $dmmanifest ]; then
		echo "ERROR: not a dm: volume ($1)"
		return 1
	fi

	shift 2
	veritysetup_options=$@

	ddev=`cat $dmmanifest | JSON.sh -l | grep data_device | awk '{ print $2 }' | sed -e 's/^"//;s/"$//'`
	hdev=`cat $dmmanifest | JSON.sh -l |  grep hash_device | awk '{ print $2 }' | sed -e 's/^"//;s/"$//'`
	rhash=`cat $dmmanifest | JSON.sh -l | grep root_hash | awk '{ print $2 }' | sed -e 's/^"//;s/"$//'`

	clean_dm "$dmname"
	if ! veritysetup open \
		$traildir/$ddev \
		$dmname \
		$traildir/$hdev \
		$rhash \
		$veritysetup_options; then
		echo "ERROR: could not setup dm volume with veritysetup"
		return 2
	fi


	mkdir -p $volpath
	if ! mount -oloop /dev/mapper/$dmname $volpath; then
		echo "ERROR: could not setup dm volume with veritysetup"
		return 3
	fi

}

do_umount_squash() {
	squashname=`basename $1`
	container=$2
	dmname=pv--dmverity--$container-${squashname%.*}
	volpath=/volumes/$container/$squashname

	if ! umount $volpath; then
		echo "WARNING: cannot umount volume: $volpath"
	fi

	if ! veritysetup close $dmname; then
		echo "WARNING: cannot close verity dm $dmname"
		echo "Does it exist in /dev/mapper?"
		ls /dev/mapper/pv*
	fi
}

# return format is a path to sha map with whitespace, e.g.
#   os/lxc.container.conf 4bd0b8e9569f5e4fa861964d051de0ade9626c6c578748c4608120b0a4afc4c9
#   os/root.squashfs 01adb13a943f2b5816816921130b2766de7e3ab316a96472e3828c425da0d241
#   os/root.squashfs.docker-digest d4e408d65d821e43a7dc76755afbd8fa3726cfee9335fb9fe04dec8f83e0cbee
verifylist() {
	trailstepdir=$1
	tmpf=`mktemp -t islazyverify.jsonsh.XXXXXXXXXXX`
	cat $trailstepdir/.pvr/json | JSON.sh -l > $tmpf
	cat $tmpf \
		| grep -v \[[^[:space:]]*,[^[:space:]]*] \
		| grep -v '\[\"#spec\"][[:space:]]' \
		| sed -e 's#^\["\([[:alnum:]/._-]*\)"\][[:space:]]*"\([a-f0-9]*\)"#\1 \2#;' \
		> $tmpf.objects
	cat $tmpf \
		| grep -E '(,"root-volume"|,"volumes"|,"modules"|,"firmware").*"dm:' \
		| sed -e 's/^\["\([^/]*\)\/.*[[:space:]]"dm:/\1\//;s/"$//' > $tmpf.filter

	cat $tmpf.filter | while read -r line; do
		sed -i "\#^$line #d" $tmpf.objects
	done
	cat $tmpf.objects | \
	    grep -v -E '(^bsp/pantavisor|^bsp/kernel.img|^bsp/fit-image.its)' | \
	    sort -u
	rm -f $tmpf $tmpf.*
}

PATH=$LIBPVPATH:$LIBPVPATH/volmount/verity:$PATH
export PATH

set -e
case $op in
	mount)
		shift 4
		do_mount_squash $volumesrc $container $@
		;;
	umount)
		do_umount_squash $volumesrc	$container
		;;
	verifylist)
		verifylist $2
		;;
	*)
		echo "WRONG command line"
		exit 127
		;;
esac
